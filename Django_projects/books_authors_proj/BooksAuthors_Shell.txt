Microsoft Windows [Version 10.0.19042.985]
(c) Microsoft Corporation. All rights reserved.

C:\Users\Dell>cd C:\Users\Dell\Desktop\Python_Stak\my_environments\djangoPy3Env\Scripts

C:\Users\Dell\Desktop\Python_Stak\my_environments\djangoPy3Env\Scripts>activate
(djangoPy3Env) C:\Users\Dell\Desktop\Python_Stak\my_environments\djangoPy3Env\Scripts>cd C:\Users\Dell\Desktop\Python_Stak\django\django_fundamentals

(djangoPy3Env) C:\Users\Dell\Desktop\Python_Stak\django\django_fundamentals>django-admin startproject books_authors_proj

(djangoPy3Env) C:\Users\Dell\Desktop\Python_Stak\django\django_fundamentals>cd books_authors_proj

(djangoPy3Env) C:\Users\Dell\Desktop\Python_Stak\django\django_fundamentals\books_authors_proj>python manage.py startapp
usage: manage.py startapp [-h] [--template TEMPLATE] [--extension EXTENSIONS]
                          [--name FILES] [--version] [-v {0,1,2,3}]
                          [--settings SETTINGS] [--pythonpath PYTHONPATH]
                          [--traceback] [--no-color] [--force-color]
                          name [directory]
manage.py startapp: error: You must provide an application name.

(djangoPy3Env) C:\Users\Dell\Desktop\Python_Stak\django\django_fundamentals\books_authors_proj>python manage.py startapp books_authors_app

(djangoPy3Env) C:\Users\Dell\Desktop\Python_Stak\django\django_fundamentals\books_authors_proj>python manage.py makemigration
Unknown command: 'makemigration'. Did you mean makemigrations?
Type 'manage.py help' for usage.

(djangoPy3Env) C:\Users\Dell\Desktop\Python_Stak\django\django_fundamentals\books_authors_proj>python manage.py makemigrations
Migrations for 'books_authors_app':
  books_authors_app\migrations\0001_initial.py
    - Create model Author
    - Create model Book

(djangoPy3Env) C:\Users\Dell\Desktop\Python_Stak\django\django_fundamentals\books_authors_proj>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, books_authors_app, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying books_authors_app.0001_initial... OK
  Applying sessions.0001_initial... OK

(djangoPy3Env) C:\Users\Dell\Desktop\Python_Stak\django\django_fundamentals\books_authors_proj>python manage.py shell
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from from django.urls import path
  File "<console>", line 1
    from from django.urls import path
            ^
SyntaxError: invalid syntax
>>> from . import views
Traceback (most recent call last):
  File "<console>", line 1, in <module>
KeyError: "'__name__' not in globals"
>>> from books_authors_app.models import *
>>> exit()

(djangoPy3Env) C:\Users\Dell\Desktop\Python_Stak\django\django_fundamentals\books_authors_proj>python manage.py makemigrations
Migrations for 'books_authors_app':
  books_authors_app\migrations\0002_auto_20210523_1349.py
    - Remove field author from book
    - Add field author to book

(djangoPy3Env) C:\Users\Dell\Desktop\Python_Stak\django\django_fundamentals\books_authors_proj>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, books_authors_app, contenttypes, sessions
Running migrations:
  Applying books_authors_app.0002_auto_20210523_1349... OK

(djangoPy3Env) C:\Users\Dell\Desktop\Python_Stak\django\django_fundamentals\books_authors_proj>python manage.py shell
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from books_authors_app.models import *
>>> Book.objects.create(title= 'C Sharp', dese= 'hard language')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\Dell\Desktop\Python_Stak\my_environments\djangoPy3Env\lib\site-packages\django\db\models\manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Dell\Desktop\Python_Stak\my_environments\djangoPy3Env\lib\site-packages\django\db\models\query.py", line 420, in create
    obj = self.model(**kwargs)
  File "C:\Users\Dell\Desktop\Python_Stak\my_environments\djangoPy3Env\lib\site-packages\django\db\models\base.py", line 501, in __init__
    raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
TypeError: Book() got an unexpected keyword argument 'dese'
>>> Book.objects.create(title= 'C Sharp', desc= 'hard language')
<Book: Book object (1)>
>>> Book.objects.create(title= 'java', desc= 'mid. language')
<Book: Book object (2)>
>>> Book.objects.create(title= 'Python', desc= 'easy language')
<Book: Book object (3)>
>>> Book.objects.create(title= 'PHP', desc= 'weard language')
<Book: Book object (4)>
>>> Book.objects.create(title= 'Ruby', desc= 'missed language')
<Book: Book object (5)>
>>> Author.objects.create(first_name= 'Jane', last_name= 'Austen')
<Author: Author object (1)>
>>> Author.objects.create(first_name= 'Emily', last_name= 'Dickinson')
<Author: Author object (2)>
>>> Author.objects.create(first_name= 'Fyodor', last_name= 'Dostoevsky')
<Author: Author object (3)>
>>> Author.objects.create(first_name= 'William', last_name= 'Shakespeare')
<Author: Author object (4)>
>>> Author.objects.create(first_name= 'Lau', last_name= 'Tzu')
<Author: Author object (5)>
>>> exit()

(djangoPy3Env) C:\Users\Dell\Desktop\Python_Stak\django\django_fundamentals\books_authors_proj>python manage.py makemigrations
Migrations for 'books_authors_app':
  books_authors_app\migrations\0003_author_notes.py
    - Add field notes to author

(djangoPy3Env) C:\Users\Dell\Desktop\Python_Stak\django\django_fundamentals\books_authors_proj>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, books_authors_app, contenttypes, sessions
Running migrations:
  Applying books_authors_app.0003_author_notes... OK

(djangoPy3Env) C:\Users\Dell\Desktop\Python_Stak\django\django_fundamentals\books_authors_proj>python manage.py shell
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from books_authors_app.models import *
>>> x= Book.objects.get(id=1)
>>> x.title = 'C#'
>>> x.save()
>>> Book.objects.get(id=1)
<Book: Book object (1)>
>>> x.values()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Book' object has no attribute 'values'
>>> Book.objects.values().get(id=1)
{'id': 1, 'title': 'C#', 'desc': 'hard language', 'created_at': datetime.datetime(2021, 5, 23, 10, 58, 34, 890656, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 12, 41, 26, 974752, tzinfo=<UTC>)}
>>> y = Author.objects.get(id=4)
>>> y.first_name = 'Bill'
>>> y.save()
>>> Author.objects.values().get(id=4)
{'id': 4, 'first_name': 'Bill', 'last_name': 'Shakespeare', 'notes': None, 'created_at': datetime.datetime(2021, 5, 23, 11, 12, 6, 465770, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 12, 45, 17, 137617, tzinfo=<UTC>)}
>>> Aws = Author.objects.get(id=4)
>>> book1 = Book.objects.det(id=1)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Manager' object has no attribute 'det'
>>> book1 = Book.objects.get(id=1)
>>> book2 = Book.objects.get(id=2)
>>> Aws.books.add(book1, book2)
>>> Aws.objects.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\Dell\Desktop\Python_Stak\my_environments\djangoPy3Env\lib\site-packages\django\db\models\manager.py", line 176, in __get__
    raise AttributeError("Manager isn't accessible via %s instances" % cls.__name__)
AttributeError: Manager isn't accessible via Author instances
>>> Aws.objects.values().all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\Dell\Desktop\Python_Stak\my_environments\djangoPy3Env\lib\site-packages\django\db\models\manager.py", line 176, in __get__
    raise AttributeError("Manager isn't accessible via %s instances" % cls.__name__)
AttributeError: Manager isn't accessible via Author instances
>>>
KeyboardInterrupt
>>>
>>>
>>> cls
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'cls' is not defined
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>> cls
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'cls' is not defined
>>> Author.objects.All()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Manager' object has no attribute 'All'
>>> Author.objects.all()
<QuerySet [<Author: Author object (1)>, <Author: Author object (2)>, <Author: Author object (3)>, <Author: Author object (4)>, <Author: Author object (5)>]>
>>> Author.objects.filter(id=4)
<QuerySet [<Author: Author object (4)>]>
>>> Author.objects.filter(id=4).values()
<QuerySet [{'id': 4, 'first_name': 'Bill', 'last_name': 'Shakespeare', 'notes': None, 'created_at': datetime.datetime(2021, 5, 23, 11, 12, 6, 465770, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 12, 45, 17, 137617, tzinfo=<UTC>)}]>
>>> Author.objects.filter(id=4).values()
<QuerySet [{'id': 4, 'first_name': 'Bill', 'last_name': 'Shakespeare', 'notes': None, 'created_at': datetime.datetime(2021, 5, 23, 11, 12, 6, 465770, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 12, 45, 17, 137617, tzinfo=<UTC>)}]>
>>> Author.objects.filter
<bound method BaseManager._get_queryset_methods.<locals>.create_method.<locals>.manager_method of <django.db.models.manager.Manager object at 0x0000017ADC0C9588>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>> Aws.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Author' object has no attribute 'all'
>>> Aws.values()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Author' object has no attribute 'values'
>>> Author.objects.filter(id=4)
<QuerySet [<Author: Author object (4)>]>
>>> Author.objects.all()
<QuerySet [<Author: Author object (1)>, <Author: Author object (2)>, <Author: Author object (3)>, <Author: Author object (4)>, <Author: Author object (5)>]>
>>> Author.objects.filter(id=4).values()
<QuerySet [{'id': 4, 'first_name': 'Bill', 'last_name': 'Shakespeare', 'notes': None, 'created_at': datetime.datetime(2021, 5, 23, 11, 12, 6, 465770, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 12, 45, 17, 137617, tzinfo=<UTC>)}]>
>>> Aws.books
<django.db.models.fields.related_descriptors.create_forward_many_to_many_manager.<locals>.ManyRelatedManager object at 0x0000017ADC0AF518>
>>> Aws.books.values()
<QuerySet [{'id': 1, 'title': 'C#', 'desc': 'hard language', 'created_at': datetime.datetime(2021, 5, 23, 10, 58, 34, 890656, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 12, 41, 26, 974752, tzinfo=<UTC>)}, {'id': 2, 'title': 'java', 'desc': 'mid. language', 'created_at': datetime.datetime(2021, 5, 23, 10, 59, 12, 623115, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 10, 59, 12, 623115, tzinfo=<UTC>)}]>
>>> Ali = Author.objects.get(id=2)
>>> book3 = Book.objects.get(id=3)
>>> Ali.books.add(book3, book1, book2)
>>> Ali.save()
>>> Ali.books.values()
<QuerySet [{'id': 1, 'title': 'C#', 'desc': 'hard language', 'created_at': datetime.datetime(2021, 5, 23, 10, 58, 34, 890656, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 12, 41, 26, 974752, tzinfo=<UTC>)}, {'id': 2, 'title': 'java', 'desc': 'mid. language', 'created_at': datetime.datetime(2021, 5, 23, 10, 59, 12, 623115, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 10, 59, 12, 623115, tzinfo=<UTC>)}, {'id': 3, 'title': 'Python', 'desc': 'easy language', 'created_at': datetime.datetime(2021, 5, 23, 10, 59, 53, 712106, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 10, 59, 53, 712106, tzinfo=<UTC>)}]>
>>> book4 = Book.objects.get(id=4)
>>> book5 = Book.objects.get(id=5)
>>> Saad = Author.objects.get(id=3)
>>> Ghaith0 = Author.objects.get(id=4)
>>> Saad.books.add(book3, book1, book2, book4)
>>> Ghaith0.books.add(book3, book5, book1, book2, book4)
>>> Author.books.values().all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'ManyToManyDescriptor' object has no attribute 'values'
>>> Saad.books.values()
<QuerySet [{'id': 1, 'title': 'C#', 'desc': 'hard language', 'created_at': datetime.datetime(2021, 5, 23, 10, 58, 34, 890656, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 12, 41, 26, 974752, tzinfo=<UTC>)}, {'id': 2, 'title': 'java', 'desc': 'mid. language', 'created_at': datetime.datetime(2021, 5, 23, 10, 59, 12, 623115, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 10, 59, 12, 623115, tzinfo=<UTC>)}, {'id': 3, 'title': 'Python', 'desc': 'easy language', 'created_at': datetime.datetime(2021, 5, 23, 10, 59, 53, 712106, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 10, 59, 53, 712106, tzinfo=<UTC>)}, {'id': 4, 'title': 'PHP', 'desc': 'weard language', 'created_at': datetime.datetime(2021, 5, 23, 11, 0, 9, 656067, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 11, 0, 9, 656067, tzinfo=<UTC>)}]>
>>> book3.author.values()
<QuerySet [{'id': 2, 'first_name': 'Emily', 'last_name': 'Dickinson', 'notes': None, 'created_at': datetime.datetime(2021, 5, 23, 11, 10, 38, 800797, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 13, 7, 43, 199770, tzinfo=<UTC>)}, {'id': 3, 'first_name': 'Fyodor', 'last_name': 'Dostoevsky', 'notes': None, 'created_at': datetime.datetime(2021, 5, 23, 11, 11, 36, 385160, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 11, 11, 36, 385160, tzinfo=<UTC>)}, {'id': 4, 'first_name': 'Bill', 'last_name': 'Shakespeare', 'notes': None, 'created_at': datetime.datetime(2021, 5, 23, 11, 12, 6, 465770, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 12, 45, 17, 137617, tzinfo=<UTC>)}]>
>>> book3.author.remove(Author.objects.get(id=2))
>>> mohaamad = Author.objects.get(id=5)
>>> book3.author.add(mohaamad)
>>> mohaamad.books.values()
<QuerySet [{'id': 3, 'title': 'Python', 'desc': 'easy language', 'created_at': datetime.datetime(2021, 5, 23, 10, 59, 53, 712106, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 10, 59, 53, 712106, tzinfo=<UTC>)}]>
>>> Saad.books.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>, <Book: Book object (4)>]>
>>> Saad.books.all().values()
<QuerySet [{'id': 1, 'title': 'C#', 'desc': 'hard language', 'created_at': datetime.datetime(2021, 5, 23, 10, 58, 34, 890656, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 12, 41, 26, 974752, tzinfo=<UTC>)}, {'id': 2, 'title': 'java', 'desc': 'mid. language', 'created_at': datetime.datetime(2021, 5, 23, 10, 59, 12, 623115, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 10, 59, 12, 623115, tzinfo=<UTC>)}, {'id': 3, 'title': 'Python', 'desc': 'easy language', 'created_at': datetime.datetime(2021, 5, 23, 10, 59, 53, 712106, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 10, 59, 53, 712106, tzinfo=<UTC>)}, {'id': 4, 'title': 'PHP', 'desc': 'weard language', 'created_at': datetime.datetime(2021, 5, 23, 11, 0, 9, 656067, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 11, 0, 9, 656067, tzinfo=<UTC>)}]>
>>> book5.author.all()
<QuerySet [<Author: Author object (4)>]>
>>> book5.author.all().values()
<QuerySet [{'id': 4, 'first_name': 'Bill', 'last_name': 'Shakespeare', 'notes': None, 'created_at': datetime.datetime(2021, 5, 23, 11, 12, 6, 465770, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 5, 23, 12, 45, 17, 137617, tzinfo=<UTC>)}]>
>>>